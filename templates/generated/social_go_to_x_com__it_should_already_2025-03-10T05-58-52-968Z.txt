# Generated Prompt
# Original Command: go to x.com. it should already be logged in with my account. then search for "MCP" and summarize the first tweet returned by the search
# Task Type: social
# Generated: 2025-03-10T05:58:52.970Z
# ===================================

# X.com Search and Summarize Automation

Below are detailed step-by-step instructions for automating a search on X.com (formerly Twitter) for a specific username and content, then summarizing the results.

## 1. Navigate to X.com

```javascript
await puppeteer_navigate("https://x.com/");
```

## 2. Handle Authentication and Login Wall

```javascript
// Wait for either the main timeline or a login wall to appear
await puppeteer_waitForSelector_with_polling("article, div[data-testid='LoginForm'], div[data-testid='confirmationSheetDialog']", { timeout: 10000 });

// Check if we're already logged in by looking for a compose tweet button
const isLoggedIn = await puppeteer_evaluate(() => {
  const composeButton = document.querySelector('a[data-testid="SideNav_NewTweet_Button"]');
  const timelineExists = document.querySelector('div[data-testid="primaryColumn"]');
  return !!composeButton || !!timelineExists;
});

// If not logged in, handle the login wall
if (!isLoggedIn) {
  console.log("Not logged in. X.com login is required to proceed.");
  
  // Take a screenshot of the login page for reference
  await puppeteer_screenshot("login_page.png");
  
  // IMPORTANT: We cannot automate the login process as it requires credentials
  // Inform the user that manual login is required
  throw new Error("Please log in to X.com manually, then run this automation again.");
}

// Handle any cookie consent or notification dialogs
await puppeteer_evaluate(() => {
  const closeButtons = Array.from(document.querySelectorAll('div[role="button"]')).filter(el => 
    el.textContent.includes("Close") || el.textContent.includes("Not now") || el.textContent.includes("Maybe later")
  );
  if (closeButtons.length > 0) closeButtons[0].click();
});
```

## 3. Navigate to Search

```javascript
// Click on the search icon or navigate directly to search
await puppeteer_waitForSelector('a[data-testid="AppTabBar_Explore_Link"], input[data-testid="SearchBox_Search_Input"]', { timeout: 5000 });

const hasSearchBar = await puppeteer_evaluate(() => {
  return !!document.querySelector('input[data-testid="SearchBox_Search_Input"]');
});

if (!hasSearchBar) {
  // Click the explore/search tab if the search bar is not immediately visible
  await puppeteer_click('a[data-testid="AppTabBar_Explore_Link"]');
  await puppeteer_waitForSelector('input[data-testid="SearchBox_Search_Input"]', { timeout: 5000 });
}
```

## 4. Perform the Search

```javascript
// Click on the search input
await puppeteer_click('input[data-testid="SearchBox_Search_Input"]');

// Fill the search input with the username and content
await puppeteer_fill('input[data-testid="SearchBox_Search_Input"]', '{{username}} {{content}}');

// Press Enter to submit the search
await puppeteer_evaluate(() => {
  const searchInput = document.querySelector('input[data-testid="SearchBox_Search_Input"]');
  if (searchInput) {
    const event = new KeyboardEvent('keydown', {
      key: 'Enter',
      code: 'Enter',
      which: 13,
      keyCode: 13,
      bubbles: true
    });
    searchInput.dispatchEvent(event);
  }
});

// Wait for search results to load
await puppeteer_waitForSelector_with_polling('section[aria-labelledby="accessible-list-*"], div[data-testid="cellInnerDiv"]', { timeout: 15000 });
```

## 5. Find and Process the First Tweet

```javascript
// Wait for the tweet timeline to load
await puppeteer_waitForSelector_with_polling('article[data-testid="tweet"]', { timeout: 10000 });

// Extract information from the first tweet
const tweetData = await puppeteer_