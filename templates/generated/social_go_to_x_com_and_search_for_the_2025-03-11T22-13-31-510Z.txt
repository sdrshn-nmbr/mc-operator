# Generated Prompt
# Original Command: go to x.com and search for the word MCP. then summarize the first tween in 1 line
# Task Type: social
# Generated: 2025-03-11T22:13:31.511Z
# ===================================

# X.com Search and Summarize Automation

Here are detailed step-by-step instructions for searching for "MCP" on X.com and summarizing the first tweet:

## 1. Navigate to X.com

```
puppeteer_navigate("https://x.com")
```

## 2. Handle Initial Page Load and Possible Interruptions

```
puppeteer_waitForSelector("body", { timeout: 30000 })
```

```
puppeteer_evaluate(`
  // Close any modals that might appear (login prompts, cookie notices)
  const closeButtons = Array.from(document.querySelectorAll('div[role="button"]')).filter(el => 
    el.textContent.includes('Close') || 
    el.textContent.includes('Not now') || 
    el.textContent.includes('Cancel')
  );
  if (closeButtons.length > 0) closeButtons[0].click();
`)
```

## 3. Locate and Interact with the Search Functionality

```
puppeteer_waitForSelector_with_polling('input[placeholder*="Search"], input[aria-label*="Search"], input[data-testid="SearchBox_Search_Input"]', { timeout: 10000, pollingInterval: 500 })
```

```
puppeteer_click('input[placeholder*="Search"], input[aria-label*="Search"], input[data-testid="SearchBox_Search_Input"]')
```

```
puppeteer_fill('input[placeholder*="Search"], input[aria-label*="Search"], input[data-testid="SearchBox_Search_Input"]', 'MCP')
```

## 4. Submit the Search Query (Multiple Methods for Reliability)

### Method 1: Press Enter key to submit search
```
puppeteer_evaluate(`
  const searchInput = document.querySelector('input[placeholder*="Search"], input[aria-label*="Search"], input[data-testid="SearchBox_Search_Input"]');
  if (searchInput) {
    // Create and dispatch an Enter key event
    const event = new KeyboardEvent('keydown', {
      key: 'Enter',
      code: 'Enter',
      keyCode: 13,
      which: 13,
      bubbles: true
    });
    searchInput.dispatchEvent(event);
  }
`)
```

### Method 2: Click search button if available
```
puppeteer_evaluate(`
  // Try to find and click a search submit button
  const searchButtons = Array.from(document.querySelectorAll('div[role="button"], button')).filter(el => {
    const ariaLabel = el.getAttribute('aria-label');
    return ariaLabel && (ariaLabel.includes('Search') || ariaLabel.includes('search'));
  });
  if (searchButtons.length > 0) searchButtons[0].click();
`)
```

## 5. Wait for Search Results to Load

```
puppeteer_waitForSelector_with_polling('article[data-testid="tweet"], div[data-testid="tweet"], div[data-testid="tweetText"]', { timeout: 15000, pollingInterval: 1000 })
```

## 6. Extract Content from the First Tweet

```
puppeteer_evaluate(`
  // Find all tweets
  const tweets = document.querySelectorAll('article[data-testid="tweet"], div[data-testid="tweet"]');
  
  if (tweets.length > 0) {
    // Get the first tweet
    const firstTweet = tweets[0];
    
    // Extract the tweet text
    const tweetTextElement = firstTweet.querySelector('div[data-testid="tweetText"]');
    const tweetText = tweetTextElement ? tweetTextElement.textContent : 'No text found';
    
    // Extract author information
    const authorElement = firstTweet.querySelector('div[data-testid="User-Name"] a, a[role="link"][tabindex="-1"]');
    const author = authorElement ? authorElement.textContent : 'Unknown author';
    
    // Extract engagement metrics if available
    const metrics = {};
    const statsElements = firstTweet.querySelectorAll('div[role="group"] div[role="button